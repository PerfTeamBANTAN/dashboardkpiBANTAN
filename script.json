const SHEET_ID = '1J1c54S6RQUK1D48tSP45AoYXpbFzWcSwO7G6imrxRpY';
const SHEET_NAME = 'DATA NOTACH';
const FOLDER_ID = '13x4Po9DH-9HTdwE-DFBIaRwvVF3wPDvL';
const ALLOWED_ORIGIN = 'https://perfteambantan.github.io';

function doGet(e) {
  const kategori = (e.parameter.kategori || '').toLowerCase();
  let data = [];

  if (kategori === 'racing mitra') {
    const values = SpreadsheetApp.openById(SHEET_ID).getSheetByName('RACING').getDataRange().getValues();
    data = values.slice(1, 13).map(row => ({
      nama: row[0], sektor: row[1], gms: row[2], zero: row[3], ach_zero: row[4],
      pi12: row[5], ach_pi12: row[6], kpi: row[7], ach_kpi: row[8], tnps: row[9],
      ach_tnps: row[10], psb: row[11], ach_psb: row[12], realisasi: row[13], rank: row[14]
    }));

  } else if (kategori === 'racing hsa') {
    const values = SpreadsheetApp.openById(SHEET_ID).getSheetByName('RACING').getDataRange().getValues();
    data = values.slice(14, 23).map(row => ({
      nama: row[0], sektor: row[1], gms: row[2], zero: row[3], ach_zero: row[4],
      pi12: row[5], ach_pi12: row[6], kpi: row[7], ach_kpi: row[8], tnps: row[9],
      ach_tnps: row[10], psb: row[11], ach_psb: row[12], realisasi: row[13], rank: row[14]
    }));

  } else if (kategori === '12 pi laten' || kategori === 'dashboard ioan b2c' || kategori === 'asgar ioan' || kategori === 'data notach') {
    const sheetName = kategori === '12 pi laten' ? '12 PI LATEN'
                    : kategori === 'dashboard ioan b2c' ? 'KPI B2C'
                    : kategori === 'asgar ioan' ? 'ASGAR IOAN'
                    : 'DATA NOTACH';
    const values = SpreadsheetApp.openById(SHEET_ID).getSheetByName(sheetName).getDataRange().getValues();
    const headers = values[0];
    data = values.slice(1).map(row => {
      let obj = {};
      headers.forEach((h, i) => obj[h] = row[i]);
      return obj;
    });

  } else if (kategori === 'underspec') {
    const values = SpreadsheetApp.openById(SHEET_ID).getSheetByName('UNSPEC').getDataRange().getValues();
    const headers = values[0];
    const body = values.slice(1);
    const tangerang = [], banten = [];
    let mode = 'tangerang';
    body.forEach(row => {
      const territory = (row[0] || '').toString().trim().toUpperCase();
      if (territory === 'BANTEN') mode = 'banten';
      (mode === 'tangerang' ? tangerang : banten).push(row);
    });
    data = { headers, tangerang, banten };

  } else if (kategori === 'scc') {
    data = SpreadsheetApp.openById(SHEET_ID).getSheetByName('SCC').getRange(3, 1, SpreadsheetApp.openById(SHEET_ID).getSheetByName('SCC').getLastRow() - 2, 10).getValues();

  } else if (kategori === 'tangible') {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName('TANGIBLE');
    data = {
      data_tangerang: sheet.getRange('A6:R33').getValues(),
      data_banten: sheet.getRange('A40:R51').getValues(),
      total_tangerang: sheet.getRange('A4:R4').getValues()[0],
      total_banten: sheet.getRange('A38:R38').getValues()[0]
    };

  } else if (kategori === 'laporan wa') {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName('LAPORAN WA');
    data = {
      laporan1: sheet.getRange('A1:F27').getValues(),
      laporan2: sheet.getRange('A30:H60').getValues(),
      laporan3: sheet.getRange('A66:D94').getValues()
    };

  } else if (kategori === 'laporan acceptance') {
    data = SpreadsheetApp.openById('1MiZqsr6BbhfAbKQm52ULpAMfirx8R7vcxGRY7_djXbU').getSheetByName('Acceptance').getRange('A1:D14').getValues();
  }

  return ContentService.createTextOutput(JSON.stringify(data))
    .setMimeType(ContentService.MimeType.JSON)
    .appendHeader("Access-Control-Allow-Origin", ALLOWED_ORIGIN)
    .appendHeader("Access-Control-Allow-Methods", "GET, OPTIONS")
    .appendHeader("Access-Control-Allow-Headers", "Content-Type");
}

function doPost(e) {
  const responseHeaders = {
    "Access-Control-Allow-Origin": ALLOWED_ORIGIN,
    "Access-Control-Allow-Methods": "POST, GET, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type"
  };

  try {
    const data = JSON.parse(e.postData.contents || '{}');
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
    let fileUrl = '';

    if (data.file && data.filename) {
      const blob = Utilities.base64Decode(data.file);
      const fileBlob = Utilities.newBlob(blob, data.mimeType, data.filename);
      const folder = DriveApp.getFolderById(FOLDER_ID);
      const uploaded = folder.createFile(fileBlob);
      uploaded.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
      fileUrl = uploaded.getUrl();
    }

    sheet.appendRow([
      data.timestamp, data.kpi, data.indikator, data.witel, data.sto,
      data.tiket, data.nd, data.keterangan, fileUrl
    ]);

    return ContentService.createTextOutput(JSON.stringify({ status: 'success' }))
      .setMimeType(ContentService.MimeType.JSON)
      .setHeaders(responseHeaders);

  } catch (err) {
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: err.message }))
      .setMimeType(ContentService.MimeType.JSON)
      .setHeaders(responseHeaders);
  }
}

function doOptions(e) {
  return ContentService.createTextOutput('')
    .setHeaders({
      "Access-Control-Allow-Origin": ALLOWED_ORIGIN,
      "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type"
    });
}
