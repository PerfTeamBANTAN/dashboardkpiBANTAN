function doGet(e) {
  const kategori = (e.parameter.kategori || "").toLowerCase();
  let data = [];

  if (kategori === 'racing mitra') {
    const sheet = SpreadsheetApp.openById('1J1c54S6RQUK1D48tSP45AoYXpbFzWcSwO7G6imrxRpY').getSheetByName('RACING');
    const values = sheet.getDataRange().getValues();
    data = values.slice(1, 13).map(row => ({
      nama: row[0],
      sektor: row[1],
      gms: row[2],
      zero: row[3],
      ach_zero: row[4],
      pi12: row[5],
      ach_pi12: row[6],
      kpi: row[7],
      ach_kpi: row[8],
      tnps: row[9],
      ach_tnps: row[10],
      psb: row[11],
      ach_psb: row[12],
      realisasi: row[13],
      rank: row[14]
    }));

  } else if (kategori === 'racing hsa') {
    const sheet = SpreadsheetApp.openById('1J1c54S6RQUK1D48tSP45AoYXpbFzWcSwO7G6imrxRpY').getSheetByName('RACING');
    const values = sheet.getDataRange().getValues();
    data = values.slice(14, 23).map(row => ({
      nama: row[0],
      sektor: row[1],
      gms: row[2],
      zero: row[3],
      ach_zero: row[4],
      pi12: row[5],
      ach_pi12: row[6],
      kpi: row[7],
      ach_kpi: row[8],
      tnps: row[9],
      ach_tnps: row[10],
      psb: row[11],
      ach_psb: row[12],
      realisasi: row[13],
      rank: row[14]
    }));

  } else if (kategori === '12 pi laten') {
    const sheet = SpreadsheetApp.openById('1J1c54S6RQUK1D48tSP45AoYXpbFzWcSwO7G6imrxRpY').getSheetByName('12 PI LATEN');
    const values = sheet.getDataRange().getValues();
    const headers = values[0];
    const body = values.slice(1);
    data = body.map(row => {
      let obj = {};
      headers.forEach((h, i) => obj[h] = row[i]);
      return obj;
    });

  } else if (kategori === 'dashboard ioan b2c') {
    const sheet = SpreadsheetApp.openById('1J1c54S6RQUK1D48tSP45AoYXpbFzWcSwO7G6imrxRpY').getSheetByName('KPI B2C');
    const values = sheet.getDataRange().getValues();
    const headers = values[0];
    const body = values.slice(1);
    data = body.map(row => {
      let obj = {};
      headers.forEach((h, i) => obj[h] = row[i]);
      return obj;
    });

  } else if (kategori === 'racing ioan mitra') {
    const sheet = SpreadsheetApp.openById('1J1c54S6RQUK1D48tSP45AoYXpbFzWcSwO7G6imrxRpY').getSheetByName('IOAN MITRA');
    const values = sheet.getDataRange().getValues();
    const headers = values[0];
    const body = values.slice(1, 30);
    const rankingRow = values[30] || [];

    const finalData = [...body];
    if (rankingRow.length && rankingRow[0].toString().toLowerCase().includes('ranking')) {
      finalData.push(rankingRow);
    }

    finalData.unshift(headers);
    return ContentService
      .createTextOutput(JSON.stringify(finalData))
      .setMimeType(ContentService.MimeType.JSON);

  } else if (kategori === 'service availability') {
    const sheet = SpreadsheetApp.openById('1J1c54S6RQUK1D48tSP45AoYXpbFzWcSwO7G6imrxRpY').getSheetByName('SERVICE AVAILABILITY');
    const values = sheet.getDataRange().getValues();
    const headers = values[0];
    const bulanSekarang = Utilities.formatDate(new Date(), "GMT+7", "MMM ''yy");
    const indexBulan = headers.indexOf(bulanSekarang);
    const indexAVG = headers.indexOf("AVG");
    const targetRow = values.find(row => (row[0] || "").toString().trim().toUpperCase() === "TARGET");

    const summary = [];
    const tabel = [headers];

    for (let i = 1; i < values.length; i++) {
      const row = values[i];
      if ((row[0] || "").toString().trim().toUpperCase() === "TARGET") continue;

      summary.push({
        wilayah: (row[0] || "").toString().trim(),
        bulan: bulanSekarang,
        nilai: indexBulan >= 0 ? parseFloat(row[indexBulan]) : null,
        avg: indexAVG >= 0 ? parseFloat(row[indexAVG]) : null,
        target: indexBulan >= 0 && targetRow ? parseFloat(targetRow[indexBulan]) : null
      });

      tabel.push(row);
    }

    return ContentService
      .createTextOutput(JSON.stringify({ summary, tabel }))
      .setMimeType(ContentService.MimeType.JSON);
  }

  return ContentService
    .createTextOutput(JSON.stringify(data))
    .setMimeType(ContentService.MimeType.JSON);
}

function doPost(e) {
  const sheet = SpreadsheetApp.openById("1J1c54S6RQUK1D48tSP45AoYXpbFzWcSwO7G6imrxRpY").getSheetByName("TIKET B2C");

  if (!e.postData || !e.postData.contents) {
    return ContentService.createTextOutput(JSON.stringify({ success: false, message: "No data received" }))
      .setMimeType(ContentService.MimeType.JSON);
  }

  try {
    const payload = JSON.parse(e.postData.contents);
    const rows = payload.rows;

    if (!Array.isArray(rows) || rows.length === 0) {
      return ContentService.createTextOutput(JSON.stringify({ success: false, message: "Invalid rows" }))
        .setMimeType(ContentService.MimeType.JSON);
    }

    sheet.clearContents(); // Kosongkan isi lama
    sheet.getRange(1, 1, rows.length, rows[0].length).setValues(rows);

    return ContentService
      .createTextOutput(JSON.stringify({ success: true }))
      .setMimeType(ContentService.MimeType.JSON);

  } catch (err) {
    return ContentService
      .createTextOutput(JSON.stringify({ success: false, message: err.message }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}
